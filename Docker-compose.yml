version: '3.8'
services:
  # frontend:
  #   container_name: frontend
  #   build: ./Frontend
  #   environment:
  #     - NODE_ENV=${NODE_ENV}
  #   volumes:
  #     - ./img:/app/public/img
  #   ports:
  #     - 3000:3000
  #   restart: always
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5432:${POSTGRES_PORT}
    restart: unless-stopped
    networks:
      - app-network
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - 5050:80
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network
  storage:
    container_name: storage
    build: ./Storage
    volumes:
      - ./img:/app/img
    ports:
      - 8001:8000
    depends_on:
      - postgres
    restart: always
    networks:
      - app-network
  user-backend:
    container_name: user-service
    build: ./User
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PROTOCOL=${POSTGRES_PROTOCOL}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - POSTGRES_TIMEZONE=${POSTGRES_TIMEZONE}
      - ECHO_PORT=${ECHO_PORT_USER}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - ${ECHO_PORT_USER}:${ECHO_PORT_USER}
    depends_on:
      - postgres
    networks:
      - app-network
  review-backend:
    container_name: review-service
    build: ./Review
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PROTOCOL=${POSTGRES_PROTOCOL}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - POSTGRES_TIMEZONE=${POSTGRES_TIMEZONE}
      - ECHO_PORT=${ECHO_PORT_REVIEW}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - ${ECHO_PORT_REVIEW}:${ECHO_PORT_REVIEW}
    depends_on:
      - postgres
    networks:
      - app-network
  product-backend:
    container_name: product-service
    build: ./Product
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PROTOCOL=${POSTGRES_PROTOCOL}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - POSTGRES_TIMEZONE=${POSTGRES_TIMEZONE}
      - ECHO_PORT=${ECHO_PORT_PRODUCT}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - ${ECHO_PORT_PRODUCT}:${ECHO_PORT_PRODUCT}
    depends_on:
      - postgres
    networks:
      - app-network
  order-backend:
    container_name: order-service
    build: ./Order
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PROTOCOL=${POSTGRES_PROTOCOL}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - POSTGRES_TIMEZONE=${POSTGRES_TIMEZONE}
      - ECHO_PORT=${ECHO_PORT_ORDER}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - ${ECHO_PORT_ORDER}:${ECHO_PORT_ORDER}
    depends_on:
      - postgres
    networks:
      - app-network
volumes:
  postgres_data:
networks:
  app-network:
    driver: bridge